#!/data/data/com.termux/files/usr/bin/bash
# Android Unpack Repack
# version 1.1
# Written by: Adam Najmi Zidan (user-ilang)
# Special Thanks to: 1. Andrei Conache (xpirt), for his img2sdat2img script
#                    2. Jake Valletta (jakev), for his sefcontext-parser script
#                    3. Rendi Stiawan (Rendiix), for his amazing pkg
#                    4. Google, StackOverFlow, and many more!
#
# Notes: I don't know what the name of this project will be, so I just name it
#        Android Unpack Repack (AUR). If there are similarities in names, please
#        let me know immediately :)
#
# Supported OS version: 1. Lollipop 5.0 SDK21
#                       2. Lollipop 5.1 SDK22
#                       3. Marshmallow 6.0 SDK23
#                       4. Nougat 7.0 SDK24
#                       5. Nougat 7.1 SDK25
#                       6. Oreo 8.0 SDK26
#                       7. Oreo 8.1 SDK27
#                       8. Pie 9.0 SDK28 [Need test in other devices]
#                       9. Ten 10.0 SDK29 [Need test in other devices]
#
#
# Begin list of all functions
#

# Func 1: if AUR was started, it decide to going main_menu or setup_wizard (for first time only)
start()
{
    if [ -f $AUR ];
      then
        main_menu;
      else
        setup_wizard;
    fi;
}

# Func 2: Just to show up AUR banner in console :D
header()
{
    clear;
    echo "------------------------------------------------";
    echo "-                                              -";
    echo "-   A N D R O I D  U N P A C K  R E P A C K    -";
    echo "-                                              -";
    echo "------------------------------------------------";
    sleep 1;
}

# Func 3: For AUR installation and checking AUR in menu
setup_wizard()
{

    # Show header
    header;
    echo "| WELCOME TO AUR SETUP WIZARD!                 |";
    echo "------------------------------------------------";
    
    # Preparing
    echo "I: Preparing setup...";
    AUR_DIR=$(pwd);
    AUR_TMP=$AUR_DIR/aur;

    # Updating Package
    echo "I: Update and Installing package(s)";
    tmux_pkg >/dev/null 2>&1;

    # Checking Rendiix's package(s)
    if [ -f $RENDIIX ];
      then
        echo "I: Found: Rendiix's package(s)";
      else
        echo "I: Installing Rendiix's package(s)";
        rendiix_pkg >/dev/null 2>&1;
    fi;

    # Installing AUR
    echo "I: Installing aur script...";
    mv $AUR_TMP $AUR >/dev/null 2>&1;
    
    # Clean up script
    rm -rf $AUR_DIR;
    
    # Finishing
    cd $HOME;

    # Doneee
    echo "I: AUR has been installed to your Termux";
    echo "I: Run 'aur' in your working directory!";
    echo "I: Bought to you by: user-ilang";
    echo "------------------------------------------------";
    echo "|  P R E S S  E N T E R  T O  C O N T I N U E  |";
    read -p "------------------------------------------------" DONE;
}

# Func 4: This will instal/update some packages (tsu git wget python brotli)
tmux_pkg()
{
    pkg update -y && pkg upgrade -y;
    pkg install tsu git wget python brotli -y;
}

# Func 5: Installing Rendiix dependencies and update pkg
rendiix_pkg()
{
    mkdir $RENDIIX && cd $RENDIIX;
    wget https://rendiix.github.io/install-repo.sh;
    chmod +x install-repo.sh;
    bash install-repo.sh;
    pkg update -y && pkg upgrade -y;
    pkg install ext4fs-tools img2sdat sdat2img -y;
}

# Func 6: Show AUR's main menu
main_menu()
{
    # AUR's list menus
    header;
    echo "| WELCOME!                                     |";
    echo "------------------------------------------------";
    echo " 1. Unpack                                     ";
    echo " 2. Repack                                     ";
    echo " 3. Check script                               ";
    echo " 4. Contributors                               ";
    echo " 0. Exit                                       ";
    echo "------------------------------------------------";
    read -p "> Select what's do you need [0-4]: " INPUT;

    # Redirect to other functions
    case $INPUT in
    1) unpack;
       main_menu;;
    2) detect_partition;
       main_menu;;
    3) setup_wizard;
       main_menu;;
    4) contributors;
       main_menu;;
    0) clear;
       exit;;
    *) main_menu;;
    esac;
}

# Func 7: Unpack function
unpack()
{
    # Show up header
    header;
    echo "| UNPACKING                                    |";
    echo "------------------------------------------------";

    # Let's record time to unpack
    DATE=$(date +%Y%m%d-%H%M);
    DATESAVE=$DATE;
    START=$(date +"%s");

    # Cleaning old files
    echo "I: Cleaning up old files..." | tee -i $AUR_LOGS/AUR-Unpack-"$DATESAVE".txt;
    for dir in system vendor tmp;
      do
        rm -rf ./$dir;
    done;

    # Checking if your dat was compressed with brotli or not
    if [ -f ./system.new.dat.br ];
      then
        echo "I: Decompressing system with brotli..." | tee -i $AUR_LOGS/AUR-Unpack-"$DATESAVE".txt;
        brotli -d ./system.new.dat.br;
        rm -rf ./system.new.dat.br;
    elif [ -f ./vendor.new.dat.br ];
      then
        echo "I: Decompressing vendor with brotli..." | tee -i $AUR_LOGS/AUR-Unpack-"$DATESAVE".txt;
        brotli -d ./vendor.new.dat.br;
        rm -rf ./vendor.new.dat.br;
      else
        echo "I: Skipping brotli decompressing..." | tee -i $AUR_LOGS/AUR-Unpack-"$DATESAVE".txt;
    fi;

    # If your dat aren't compressed with brotli, then your dat will automatically converted to image
    if [ -f ./system.new.dat ];
      then
        echo "I: Converting system with sdat2img..." | tee -i $AUR_LOGS/AUR-Unpack-"$DATESAVE".txt;
        sdat2img ./system.transfer.list ./system.new.dat ./system_raw.img >> $AUR_LOGS/AUR-Unpack-"$DATESAVE".txt;
        rm -rf ./system.new.dat ./system.patch.dat ./system.transfer.list;
    elif [ -f ./vendor.new.dat ];
      then
        echo "I: Converting vendor with sdat2img..." | tee -i $AUR_LOGS/AUR-Unpack-"$DATESAVE".txt;
        sdat2img ./vendor.transfer.list ./vendor.new.dat ./vendor_raw.img >> $AUR_LOGS/AUR-Unpack-"$DATESAVE".txt;
        rm -rf ./vendor.new.dat ./vendor.patch.dat ./vendor.transfer.list;
      else
        echo "I: Skipping sdat2img task" | tee -i $AUR_LOGS/AUR-Unpack-"$DATESAVE".txt;
    fi;

    # Extracting your image
    if [ -f ./system.img ];
      then
        echo "I: Extracting system image..." | tee -i $AUR_LOGS/AUR-Unpack-"$DATESAVE".txt;
        mkdir ./system ./tmp;
        losetup /dev/block/loop3 ./system_raw.img;
        mount -t ext4 /dev/block/loop3 ./system;
        cp -rfp ./system ./tmp;
        losetup -d /dev/block/loop3;
        umount /dev/block/loop3;
        mv ./tmp/system ./;
        rm -rf ./system_raw.img ./tmp;
    elif [ -f ./vendor_raw.img ];
      then
        echo "I: Extracting vendor image..." | tee -i $AUR_LOGS/AUR-Unpack-"$DATESAVE".txt;
        mkdir ./vendor ./tmp;
        losetup /dev/block/loop3 ./vendor_raw.img;
        mount -t ext4 /dev/block/loop3 ./vendor;
        cp -rfp ./vendor ./tmp;
        losetup -d /dev/block/loop3;
        umount /dev/block/loop3;
        mv ./tmp/vendor ./;
        rm -rf ./vendor_raw.img ./tmp;
      else
        echo "E: Failed to extract image..." | tee -i $AUR_LOGS/AUR-Unpack-"$DATESAVE".txt;
    fi;

    # Record the time again
    END=$(date +"%s");
    TIME=$(($END - $START));

    # Done
    echo "I: Tasks complete..." | tee -i $AUR_LOGS/AUR-Unpack-"$DATESAVE".txt;
    echo "I: Unpacking took $(($TIME / 60)) minute(s) and $(($TIME % 60)) second(s)" | tee -i $AUR_LOGS/AUR-Unpack-"$DATESAVE".txt;
    echo "------------------------------------------------";
    echo "|  P R E S S  E N T E R  T O  C O N T I N U E  |";
    read -p "------------------------------------------------" DONE;
}

# Func 8: Detecting partition
detect_partition()
{
    if [ -d ./system ];
      then
        system_info;
    elif [ -d ./vendor ];
      then
        vendor_info;
      else
        echo "E: Didn't found any unpacked system" | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
    fi;
}

# Func 9: Get system information
system_info()
{
    header;
    echo "| SYSTEM INFO                                  |";
    echo "------------------------------------------------";
    read -p "  Partition size [Ex:2560M]  : " PARTITION_SIZE | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
    read -p "  Build variant [IMG/DAT]    : " BUILD_VARIANT | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
    read -p "  SDK [1=21 2=22 3=23 4=24+] : " SDK_VERSION | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
    read -p "  Brotli compress [Y/N]      : " USE_BROTLI | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
    read -p "  Cleanup after finish [Y/N] : " DO_CLEANUP | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
    echo "------------------------------------------------";
    sleep 1;
    repack;
}

# Func 10: Get vendor information
vendor_info()
{
    header;
    echo "| VENDOR INFO                                  |";
    echo "------------------------------------------------";
    read -p "  Partition size [Ex: 512M]  : " PARTITION_SIZE | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
    read -p "  Build variant [IMG/DAT]    : " BUILD_VARIANT | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
    read -p "  Brotli compress [Y/N]      : " USE_BROTLI | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
    read -p "  Cleanup after finish [Y/N] : " DO_CLEANUP | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
    echo "------------------------------------------------";
    sleep 1;
    repack;
}

# Func 11: Repack function
repack()
{
    header;
    echo "| REPACKING                                    |";
    echo "------------------------------------------------";
    
    # Let's record the time!
    DATE=$(date +%Y%m%d-%H%M);
    DATESAVE=$DATE;
    START=$(date +"%s");

    # Building image
    if [ -d ./system ];
      then
        find ./system -type d -empty -exec rm -rf {} \; | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
        find ./system -exec touch -a -m -h -d 2009-01-01T07:00:00 {} \; | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
        make_ext4fs -L system -a system -l $PARTITION_SIZE ./system_raw.img ./system | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
    elif [ -d ./vendor ];
      then
        find ./vendor -type d -empty -exec rm -rf {} \; | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
        find ./vendor -exec touch -a -m -h -d 2009-01-01T07:00:00 {} \; | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
        make_ext4fs -L vendor -a vendor -l $PARTITION_SIZE ./vendor_raw.img ./vendor | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
      else
        echo "- Failed to build image..." | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
        echo "- Exiting..." | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
        main_menu;
    fi;

    # Creating output dir in AUR's home
    mkdir $AUR_HOME/$DATESAVE;

    # If user choosing IMG, then the output image will stored to AUR's home
    # But if user choosing DAT, the image will automatically converted to dat before stored to AUR's home
    case $BUILD_VARIANT in
    IMG) echo "I: Moving image to storage..." | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
         if [ -f ./system_raw.img ];
           then
             mv ./system_raw.img $AUR_HOME/$DATESAVE/system_raw.img | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
           else
             mv ./vendor_raw.img $AUR_HOME/$DATESAVE/vendor_raw.img | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
         fi;;
    DAT) echo "I: Converting raw image to sparse image..." | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
         if [ -f ./system_raw.img ];
           then
             img2simg ./system_raw.img ./system_sparse.img >> $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
           else
             img2simg ./vendor_raw.img ./vendor_sparse.img >> $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
         fi;

         echo "I: Converting sparse image to dat..." | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
         if [ -f ./system_sparse.img ];
           then
             img2sdat ./system_sparse.img -v $SDK_VERSION -o $AUR_HOME/$DATESAVE >> $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
             rm -rf ./system_sparse.img;
           else
             img2sdat ./vendor_sparse.img -v 4 -o $AUR_HOME/$DATESAVE >> $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
             rm -rf ./vendor_sparse.img;
         fi;;
    esac

    # Compress dat with brotli? Android 8.0 above was using brotli to compress the system dat
    # But if you wanna compress below Android 8.0, you can select "Y" at Partition Information
    # Don't forget to edit xxxxxx.new.dat to xxxxxx.new.dat.br at your updater-script
    case $USE_BROTLI in
    Y) echo "I: Compressing dat with brotli..." | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
       if [ -f $AUR_HOME/$DATESAVE/system.new.dat ];
         then
           brotli -5 $AUR_HOME/$DATESAVE/system.new.dat;
           rm -rf $AUR_HOME/$DATESAVE/system.new.dat;
         else
           brotli -5 $AUR_HOME/$DATESAVE/vendor.new.dat;
           rm -rf $AUR_HOME/$DATESAVE/vendor.new.dat;
       fi;;
    N) echo "I: Skipping brotli compress..." | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;;
    esac

    # Cleanup after all task done? it will remove all stuff in current directory
    case $DO_CLEANUP in
    Y) echo "I: Cleaning up source..." | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;
       rm -rf ./;; 
    N) echo "I: Skipping cleanup..." | tee -i $AUR_LOGS/AUR-Repack-"$DATESAVE".txt;;
    esac

    # Record the time again
    END=$(date +"%s");
    TIME=$(($END - $START));

    # Done
    echo "I: Tasks complete...";
    echo "I: Repacking took $(($DIFF_REPACK / 60)) minute(s) and $(($DIFF_REPACK % 60)) second(s)";
    echo "I: $AUR_HOME/$DATESAVE/";
    echo "------------------------------------------------";
    echo "|  P R E S S  E N T E R  T O  C O N T I N U E  |";
    read -p "------------------------------------------------" DONE;
}

# Func 12: Show contributors list
contributors()
{
    header;
    echo "| SPECIAL THANKS TO                            |";
    echo "------------------------------------------------";
    echo "  1. Andrei Conache, for his img2sdat2img script";
    echo "     https://github.com/xpirt                   ";
    echo "                                                ";
    echo "  2. Jake Valletta, for his sefcontext script   ";
    echo "     https://github.com/jakev                   ";
    echo "                                                ";
    echo "  3. Rendi Stiawan, for his ext4fs-tools script ";
    echo "     https://github.com/rendiix                 ";
    echo "                                                ";
    echo "                  Written by                    ";
    echo "               Adam Najmi Zidan                 ";
    echo "         https://github.com/user-ilang          ";
    echo "------------------------------------------------";
    echo "|  P R E S S  E N T E R  T O  C O N T I N U E  |";
    read -p "------------------------------------------------" DONE;
}

# Run script
AUR=$PREFIX/bin/aur;
AUR_HOME=$EXTERNAL_STORAGE/#AUR;
AUR_LOGS=$AUR_HOME/logs;
RENDIIX=$PREFIX/share/rendiix;

# Set up AUR's HOME
if [ -d $AUR_HOME ];
  then
    echo "" >/dev/null 2>&1;
elif [ -d $AUR_LOGS ];
  then
    echo "" >/dev/null 2>&1;
  else
    mkdir $AUR_HOME;
    mkdir $AUR_LOGS;
fi;

# Let's rock!!
start;
